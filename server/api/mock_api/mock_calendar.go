// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-mscalendar/server/api (interfaces: Calendar)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	remote "github.com/mattermost/mattermost-plugin-mscalendar/server/remote"
	reflect "reflect"
	time "time"
)

// MockCalendar is a mock of Calendar interface
type MockCalendar struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarMockRecorder
}

// MockCalendarMockRecorder is the mock recorder for MockCalendar
type MockCalendarMockRecorder struct {
	mock *MockCalendar
}

// NewMockCalendar creates a new mock instance
func NewMockCalendar(ctrl *gomock.Controller) *MockCalendar {
	mock := &MockCalendar{ctrl: ctrl}
	mock.recorder = &MockCalendarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalendar) EXPECT() *MockCalendarMockRecorder {
	return m.recorder
}

// ViewCalendar mocks base method
func (m *MockCalendar) ViewCalendar(arg0, arg1 time.Time) ([]*remote.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCalendar", arg0, arg1)
	ret0, _ := ret[0].([]*remote.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCalendar indicates an expected call of ViewCalendar
func (mr *MockCalendarMockRecorder) ViewCalendar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCalendar", reflect.TypeOf((*MockCalendar)(nil).ViewCalendar), arg0, arg1)
}
