// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-msoffice/server/api (interfaces: OAuth2)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOAuth2 is a mock of OAuth2 interface
type MockOAuth2 struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2MockRecorder
}

// MockOAuth2MockRecorder is the mock recorder for MockOAuth2
type MockOAuth2MockRecorder struct {
	mock *MockOAuth2
}

// NewMockOAuth2 creates a new mock instance
func NewMockOAuth2(ctrl *gomock.Controller) *MockOAuth2 {
	mock := &MockOAuth2{ctrl: ctrl}
	mock.recorder = &MockOAuth2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuth2) EXPECT() *MockOAuth2MockRecorder {
	return m.recorder
}

// CompleteOAuth2 mocks base method
func (m *MockOAuth2) CompleteOAuth2(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOAuth2", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteOAuth2 indicates an expected call of CompleteOAuth2
func (mr *MockOAuth2MockRecorder) CompleteOAuth2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOAuth2", reflect.TypeOf((*MockOAuth2)(nil).CompleteOAuth2), arg0, arg1, arg2)
}

// InitOAuth2 mocks base method
func (m *MockOAuth2) InitOAuth2(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitOAuth2", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitOAuth2 indicates an expected call of InitOAuth2
func (mr *MockOAuth2MockRecorder) InitOAuth2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitOAuth2", reflect.TypeOf((*MockOAuth2)(nil).InitOAuth2), arg0)
}
