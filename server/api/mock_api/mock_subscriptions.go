// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-msoffice/server/api (interfaces: Subscriptions)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	remote "github.com/mattermost/mattermost-plugin-msoffice/server/remote"
	store "github.com/mattermost/mattermost-plugin-msoffice/server/store"
	reflect "reflect"
)

// MockSubscriptions is a mock of Subscriptions interface
type MockSubscriptions struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsMockRecorder
}

// MockSubscriptionsMockRecorder is the mock recorder for MockSubscriptions
type MockSubscriptionsMockRecorder struct {
	mock *MockSubscriptions
}

// NewMockSubscriptions creates a new mock instance
func NewMockSubscriptions(ctrl *gomock.Controller) *MockSubscriptions {
	mock := &MockSubscriptions{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriptions) EXPECT() *MockSubscriptionsMockRecorder {
	return m.recorder
}

// CreateUserEventSubscription mocks base method
func (m *MockSubscriptions) CreateUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserEventSubscription indicates an expected call of CreateUserEventSubscription
func (mr *MockSubscriptionsMockRecorder) CreateUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserEventSubscription", reflect.TypeOf((*MockSubscriptions)(nil).CreateUserEventSubscription))
}

// DeleteOrphanedSubscription mocks base method
func (m *MockSubscriptions) DeleteOrphanedSubscription(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanedSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrphanedSubscription indicates an expected call of DeleteOrphanedSubscription
func (mr *MockSubscriptionsMockRecorder) DeleteOrphanedSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanedSubscription", reflect.TypeOf((*MockSubscriptions)(nil).DeleteOrphanedSubscription), arg0)
}

// DeleteUserEventSubscription mocks base method
func (m *MockSubscriptions) DeleteUserEventSubscription() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserEventSubscription")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserEventSubscription indicates an expected call of DeleteUserEventSubscription
func (mr *MockSubscriptionsMockRecorder) DeleteUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserEventSubscription", reflect.TypeOf((*MockSubscriptions)(nil).DeleteUserEventSubscription))
}

// ListRemoteSubscriptions mocks base method
func (m *MockSubscriptions) ListRemoteSubscriptions() ([]*remote.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteSubscriptions")
	ret0, _ := ret[0].([]*remote.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteSubscriptions indicates an expected call of ListRemoteSubscriptions
func (mr *MockSubscriptionsMockRecorder) ListRemoteSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteSubscriptions", reflect.TypeOf((*MockSubscriptions)(nil).ListRemoteSubscriptions))
}

// LoadUserEventSubscription mocks base method
func (m *MockSubscriptions) LoadUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserEventSubscription indicates an expected call of LoadUserEventSubscription
func (mr *MockSubscriptionsMockRecorder) LoadUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserEventSubscription", reflect.TypeOf((*MockSubscriptions)(nil).LoadUserEventSubscription))
}

// RenewUserEventSubscription mocks base method
func (m *MockSubscriptions) RenewUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewUserEventSubscription indicates an expected call of RenewUserEventSubscription
func (mr *MockSubscriptionsMockRecorder) RenewUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewUserEventSubscription", reflect.TypeOf((*MockSubscriptions)(nil).RenewUserEventSubscription))
}
