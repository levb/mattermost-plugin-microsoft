// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-msoffice/server/utils/bot (interfaces: Poster)

// Package mock_bot is a generated GoMock package.
package mock_bot

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	reflect "reflect"
)

// MockPoster is a mock of Poster interface
type MockPoster struct {
	ctrl     *gomock.Controller
	recorder *MockPosterMockRecorder
}

// MockPosterMockRecorder is the mock recorder for MockPoster
type MockPosterMockRecorder struct {
	mock *MockPoster
}

// NewMockPoster creates a new mock instance
func NewMockPoster(ctrl *gomock.Controller) *MockPoster {
	mock := &MockPoster{ctrl: ctrl}
	mock.recorder = &MockPosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoster) EXPECT() *MockPosterMockRecorder {
	return m.recorder
}

// PostDirectAttachments mocks base method
func (m *MockPoster) PostDirectAttachments(arg0 string, arg1 ...*model.SlackAttachment) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostDirectAttachments", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDirectAttachments indicates an expected call of PostDirectAttachments
func (mr *MockPosterMockRecorder) PostDirectAttachments(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDirectAttachments", reflect.TypeOf((*MockPoster)(nil).PostDirectAttachments), varargs...)
}

// PostDirectf mocks base method
func (m *MockPoster) PostDirectf(arg0, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostDirectf", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDirectf indicates an expected call of PostDirectf
func (mr *MockPosterMockRecorder) PostDirectf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDirectf", reflect.TypeOf((*MockPoster)(nil).PostDirectf), varargs...)
}

// PostEphemeral mocks base method
func (m *MockPoster) PostEphemeral(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostEphemeral", arg0, arg1, arg2)
}

// PostEphemeral indicates an expected call of PostEphemeral
func (mr *MockPosterMockRecorder) PostEphemeral(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEphemeral", reflect.TypeOf((*MockPoster)(nil).PostEphemeral), arg0, arg1, arg2)
}
