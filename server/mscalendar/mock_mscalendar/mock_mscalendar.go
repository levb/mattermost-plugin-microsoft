// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-mscalendar/server/mscalendar (interfaces: MSCalendar)

// Package mock_mscalendar is a generated GoMock package.
package mock_mscalendar

import (
	gomock "github.com/golang/mock/gomock"
	remote "github.com/mattermost/mattermost-plugin-mscalendar/server/remote"
	store "github.com/mattermost/mattermost-plugin-mscalendar/server/store"
	reflect "reflect"
	time "time"
)

// MockMSCalendar is a mock of MSCalendar interface
type MockMSCalendar struct {
	ctrl     *gomock.Controller
	recorder *MockMSCalendarMockRecorder
}

// MockMSCalendarMockRecorder is the mock recorder for MockMSCalendar
type MockMSCalendarMockRecorder struct {
	mock *MockMSCalendar
}

// NewMockMSCalendar creates a new mock instance
func NewMockMSCalendar(ctrl *gomock.Controller) *MockMSCalendar {
	mock := &MockMSCalendar{ctrl: ctrl}
	mock.recorder = &MockMSCalendarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMSCalendar) EXPECT() *MockMSCalendarMockRecorder {
	return m.recorder
}

// AcceptEvent mocks base method
func (m *MockMSCalendar) AcceptEvent(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptEvent indicates an expected call of AcceptEvent
func (mr *MockMSCalendarMockRecorder) AcceptEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEvent", reflect.TypeOf((*MockMSCalendar)(nil).AcceptEvent), arg0)
}

// CompleteOAuth2 mocks base method
func (m *MockMSCalendar) CompleteOAuth2(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOAuth2", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteOAuth2 indicates an expected call of CompleteOAuth2
func (mr *MockMSCalendarMockRecorder) CompleteOAuth2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOAuth2", reflect.TypeOf((*MockMSCalendar)(nil).CompleteOAuth2), arg0, arg1, arg2)
}

// CreateCalendar mocks base method
func (m *MockMSCalendar) CreateCalendar(arg0 *remote.Calendar) (*remote.Calendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCalendar", arg0)
	ret0, _ := ret[0].(*remote.Calendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCalendar indicates an expected call of CreateCalendar
func (mr *MockMSCalendarMockRecorder) CreateCalendar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCalendar", reflect.TypeOf((*MockMSCalendar)(nil).CreateCalendar), arg0)
}

// CreateEvent mocks base method
func (m *MockMSCalendar) CreateEvent(arg0 *remote.Event, arg1 []string) (*remote.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(*remote.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockMSCalendarMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockMSCalendar)(nil).CreateEvent), arg0, arg1)
}

// CreateUserEventSubscription mocks base method
func (m *MockMSCalendar) CreateUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserEventSubscription indicates an expected call of CreateUserEventSubscription
func (mr *MockMSCalendarMockRecorder) CreateUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserEventSubscription", reflect.TypeOf((*MockMSCalendar)(nil).CreateUserEventSubscription))
}

// DeclineEvent mocks base method
func (m *MockMSCalendar) DeclineEvent(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineEvent indicates an expected call of DeclineEvent
func (mr *MockMSCalendarMockRecorder) DeclineEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineEvent", reflect.TypeOf((*MockMSCalendar)(nil).DeclineEvent), arg0)
}

// DeleteCalendar mocks base method
func (m *MockMSCalendar) DeleteCalendar(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCalendar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCalendar indicates an expected call of DeleteCalendar
func (mr *MockMSCalendarMockRecorder) DeleteCalendar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCalendar", reflect.TypeOf((*MockMSCalendar)(nil).DeleteCalendar), arg0)
}

// DeleteOrphanedSubscription mocks base method
func (m *MockMSCalendar) DeleteOrphanedSubscription(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanedSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrphanedSubscription indicates an expected call of DeleteOrphanedSubscription
func (mr *MockMSCalendarMockRecorder) DeleteOrphanedSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanedSubscription", reflect.TypeOf((*MockMSCalendar)(nil).DeleteOrphanedSubscription), arg0)
}

// DeleteUserEventSubscription mocks base method
func (m *MockMSCalendar) DeleteUserEventSubscription() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserEventSubscription")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserEventSubscription indicates an expected call of DeleteUserEventSubscription
func (mr *MockMSCalendarMockRecorder) DeleteUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserEventSubscription", reflect.TypeOf((*MockMSCalendar)(nil).DeleteUserEventSubscription))
}

// FindMeetingTimes mocks base method
func (m *MockMSCalendar) FindMeetingTimes(arg0 *remote.FindMeetingTimesParameters) (*remote.MeetingTimeSuggestionResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMeetingTimes", arg0)
	ret0, _ := ret[0].(*remote.MeetingTimeSuggestionResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMeetingTimes indicates an expected call of FindMeetingTimes
func (mr *MockMSCalendarMockRecorder) FindMeetingTimes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMeetingTimes", reflect.TypeOf((*MockMSCalendar)(nil).FindMeetingTimes), arg0)
}

// GetUserAvailabilities mocks base method
func (m *MockMSCalendar) GetUserAvailabilities(arg0 string, arg1 []string) ([]*remote.ScheduleInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAvailabilities", arg0, arg1)
	ret0, _ := ret[0].([]*remote.ScheduleInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAvailabilities indicates an expected call of GetUserAvailabilities
func (mr *MockMSCalendarMockRecorder) GetUserAvailabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAvailabilities", reflect.TypeOf((*MockMSCalendar)(nil).GetUserAvailabilities), arg0, arg1)
}

// GetUserCalendars mocks base method
func (m *MockMSCalendar) GetUserCalendars(arg0 string) ([]*remote.Calendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCalendars", arg0)
	ret0, _ := ret[0].([]*remote.Calendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCalendars indicates an expected call of GetUserCalendars
func (mr *MockMSCalendarMockRecorder) GetUserCalendars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCalendars", reflect.TypeOf((*MockMSCalendar)(nil).GetUserCalendars), arg0)
}

// InitOAuth2 mocks base method
func (m *MockMSCalendar) InitOAuth2(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitOAuth2", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitOAuth2 indicates an expected call of InitOAuth2
func (mr *MockMSCalendarMockRecorder) InitOAuth2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitOAuth2", reflect.TypeOf((*MockMSCalendar)(nil).InitOAuth2), arg0)
}

// ListRemoteSubscriptions mocks base method
func (m *MockMSCalendar) ListRemoteSubscriptions() ([]*remote.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteSubscriptions")
	ret0, _ := ret[0].([]*remote.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteSubscriptions indicates an expected call of ListRemoteSubscriptions
func (mr *MockMSCalendarMockRecorder) ListRemoteSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteSubscriptions", reflect.TypeOf((*MockMSCalendar)(nil).ListRemoteSubscriptions))
}

// LoadUserEventSubscription mocks base method
func (m *MockMSCalendar) LoadUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserEventSubscription indicates an expected call of LoadUserEventSubscription
func (mr *MockMSCalendarMockRecorder) LoadUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserEventSubscription", reflect.TypeOf((*MockMSCalendar)(nil).LoadUserEventSubscription))
}

// MakeClient mocks base method
func (m *MockMSCalendar) MakeClient() (remote.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeClient")
	ret0, _ := ret[0].(remote.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeClient indicates an expected call of MakeClient
func (mr *MockMSCalendarMockRecorder) MakeClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeClient", reflect.TypeOf((*MockMSCalendar)(nil).MakeClient))
}

// MakeSuperuserClient mocks base method
func (m *MockMSCalendar) MakeSuperuserClient() remote.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeSuperuserClient")
	ret0, _ := ret[0].(remote.Client)
	return ret0
}

// MakeSuperuserClient indicates an expected call of MakeSuperuserClient
func (mr *MockMSCalendarMockRecorder) MakeSuperuserClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSuperuserClient", reflect.TypeOf((*MockMSCalendar)(nil).MakeSuperuserClient))
}

// RenewUserEventSubscription mocks base method
func (m *MockMSCalendar) RenewUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewUserEventSubscription indicates an expected call of RenewUserEventSubscription
func (mr *MockMSCalendarMockRecorder) RenewUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewUserEventSubscription", reflect.TypeOf((*MockMSCalendar)(nil).RenewUserEventSubscription))
}

// RespondToEvent mocks base method
func (m *MockMSCalendar) RespondToEvent(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToEvent indicates an expected call of RespondToEvent
func (mr *MockMSCalendarMockRecorder) RespondToEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToEvent", reflect.TypeOf((*MockMSCalendar)(nil).RespondToEvent), arg0, arg1)
}

// SyncStatusForAllUsers mocks base method
func (m *MockMSCalendar) SyncStatusForAllUsers() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatusForAllUsers")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncStatusForAllUsers indicates an expected call of SyncStatusForAllUsers
func (mr *MockMSCalendarMockRecorder) SyncStatusForAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatusForAllUsers", reflect.TypeOf((*MockMSCalendar)(nil).SyncStatusForAllUsers))
}

// SyncStatusForSingleUser mocks base method
func (m *MockMSCalendar) SyncStatusForSingleUser(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatusForSingleUser", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncStatusForSingleUser indicates an expected call of SyncStatusForSingleUser
func (mr *MockMSCalendarMockRecorder) SyncStatusForSingleUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatusForSingleUser", reflect.TypeOf((*MockMSCalendar)(nil).SyncStatusForSingleUser), arg0)
}

// TentativelyAcceptEvent mocks base method
func (m *MockMSCalendar) TentativelyAcceptEvent(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TentativelyAcceptEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TentativelyAcceptEvent indicates an expected call of TentativelyAcceptEvent
func (mr *MockMSCalendarMockRecorder) TentativelyAcceptEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TentativelyAcceptEvent", reflect.TypeOf((*MockMSCalendar)(nil).TentativelyAcceptEvent), arg0)
}

// ViewCalendar mocks base method
func (m *MockMSCalendar) ViewCalendar(arg0, arg1 time.Time) ([]*remote.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCalendar", arg0, arg1)
	ret0, _ := ret[0].([]*remote.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCalendar indicates an expected call of ViewCalendar
func (mr *MockMSCalendarMockRecorder) ViewCalendar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCalendar", reflect.TypeOf((*MockMSCalendar)(nil).ViewCalendar), arg0, arg1)
}
