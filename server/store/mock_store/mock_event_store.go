// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-mscalendar/server/store (interfaces: EventStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	gomock "github.com/golang/mock/gomock"
	store "github.com/mattermost/mattermost-plugin-mscalendar/server/store"
	reflect "reflect"
)

// MockEventStore is a mock of EventStore interface
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// DeleteUserEvent mocks base method
func (m *MockEventStore) DeleteUserEvent(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserEvent indicates an expected call of DeleteUserEvent
func (mr *MockEventStoreMockRecorder) DeleteUserEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserEvent", reflect.TypeOf((*MockEventStore)(nil).DeleteUserEvent), arg0, arg1)
}

// LoadUserEvent mocks base method
func (m *MockEventStore) LoadUserEvent(arg0, arg1 string) (*store.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserEvent", arg0, arg1)
	ret0, _ := ret[0].(*store.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserEvent indicates an expected call of LoadUserEvent
func (mr *MockEventStoreMockRecorder) LoadUserEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserEvent", reflect.TypeOf((*MockEventStore)(nil).LoadUserEvent), arg0, arg1)
}

// StoreUserEvent mocks base method
func (m *MockEventStore) StoreUserEvent(arg0 string, arg1 *store.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUserEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUserEvent indicates an expected call of StoreUserEvent
func (mr *MockEventStoreMockRecorder) StoreUserEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUserEvent", reflect.TypeOf((*MockEventStore)(nil).StoreUserEvent), arg0, arg1)
}
