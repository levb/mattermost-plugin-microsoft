// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-mscalendar/server/store (interfaces: SubscriptionStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	gomock "github.com/golang/mock/gomock"
	store "github.com/mattermost/mattermost-plugin-mscalendar/server/store"
	reflect "reflect"
)

// MockSubscriptionStore is a mock of SubscriptionStore interface
type MockSubscriptionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionStoreMockRecorder
}

// MockSubscriptionStoreMockRecorder is the mock recorder for MockSubscriptionStore
type MockSubscriptionStoreMockRecorder struct {
	mock *MockSubscriptionStore
}

// NewMockSubscriptionStore creates a new mock instance
func NewMockSubscriptionStore(ctrl *gomock.Controller) *MockSubscriptionStore {
	mock := &MockSubscriptionStore{ctrl: ctrl}
	mock.recorder = &MockSubscriptionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriptionStore) EXPECT() *MockSubscriptionStoreMockRecorder {
	return m.recorder
}

// DeleteUserSubscription mocks base method
func (m *MockSubscriptionStore) DeleteUserSubscription(arg0 *store.User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSubscription indicates an expected call of DeleteUserSubscription
func (mr *MockSubscriptionStoreMockRecorder) DeleteUserSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSubscription", reflect.TypeOf((*MockSubscriptionStore)(nil).DeleteUserSubscription), arg0, arg1)
}

// LoadSubscription mocks base method
func (m *MockSubscriptionStore) LoadSubscription(arg0 string) (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSubscription", arg0)
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSubscription indicates an expected call of LoadSubscription
func (mr *MockSubscriptionStoreMockRecorder) LoadSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSubscription", reflect.TypeOf((*MockSubscriptionStore)(nil).LoadSubscription), arg0)
}

// StoreUserSubscription mocks base method
func (m *MockSubscriptionStore) StoreUserSubscription(arg0 *store.User, arg1 *store.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUserSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUserSubscription indicates an expected call of StoreUserSubscription
func (mr *MockSubscriptionStoreMockRecorder) StoreUserSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUserSubscription", reflect.TypeOf((*MockSubscriptionStore)(nil).StoreUserSubscription), arg0, arg1)
}
